library(remotes)
ETH <- ne_states(country = "Ethiopia",
returnclass = "sf")
install.packages("sf")
ETH <- ne_states(country = "Ethiopia",
returnclass = "sf")
install.packages("ggspatial")
library(sf)
ETH <- ne_states(country = "Ethiopia",
returnclass = "sf")
ETH <- ne_states(country = "Ethiopia",
returnclass = "sf")
library(tidyverse)
library(ggspatial)
ETH <- ne_states(country = "Ethiopia",
returnclass = "sf")
library(rnaturalearth)
install.packages("terra")
library(rnaturalearth)
install.packages("terra")
ETH <- ne_states(country = "Ethiopia",
returnclass = "sf")
library(rnaturalearth)
install.packages("terra")
library(rnaturalearth)
install.packages("terra")
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
# Função para extrair dados do CLD
extrair_dados_cld <- function(cld_obj) {
df <- as.data.frame(cld_obj)
# Pega o nome da coluna de média
nome_media <- names(df)[which(names(df) %in% c("response", "emmean", "prob"))[1]]
nome_tratamento <- names(df)[which(names(df) %in% c("TRATAMENTO", "treatment", "trt"))[1]]
nome_grupo <- names(df)[which(names(df) %in% c(".group", "group"))[1]]
df_simples <- data.frame(
TRATAMENTO = df[[nome_tratamento]],
MEDIA = round(df[[nome_media]], 2),
GRUPO = df[[nome_grupo]],
stringsAsFactors = FALSE
)
return(df_simples)
}
# Criar tabela final simples
criar_tabela_final <- function() {
# Extrair dados dos dois experimentos
dados1 <- extrair_dados_cld(resultados_exp1$cld) %>% rename(MEDIA_1 = MEDIA, GRUPO_1 = GRUPO)
dados2 <- extrair_dados_cld(resultados_exp2$cld) %>% rename(MEDIA_2 = MEDIA, GRUPO_2 = GRUPO)
# Unir as tabelas pelos tratamentos
tabela <- full_join(dados1, dados2, by = "TRATAMENTO")
# Adicionar linha com CV
linha_cv <- data.frame(
TRATAMENTO = "CV (%)",
MEDIA_1 = resultados_exp1$cv,
GRUPO_1 = "",
MEDIA_2 = resultados_exp2$cv,
GRUPO_2 = "",
stringsAsFactors = FALSE
)
tabela_final <- bind_rows(tabela, linha_cv)
return(tabela_final)
}
# Gerar e exibir tabela
tabela_final <- criar_tabela_final()
View(tabela_final)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
# Função para extrair dados do CLD
extrair_dados_cld <- function(cld_obj) {
df <- as.data.frame(cld_obj)
# Pega o nome da coluna de média
nome_media <- names(df)[which(names(df) %in% c("response", "emmean", "prob"))[1]]
nome_tratamento <- names(df)[which(names(df) %in% c("TRATAMENTO", "treatment", "trt"))[1]]
nome_grupo <- names(df)[which(names(df) %in% c(".group", "group"))[1]]
df_simples <- data.frame(
TRATAMENTO = df[[nome_tratamento]],
MEDIA = round(df[[nome_media]], 2),
GRUPO = df[[nome_grupo]],
stringsAsFactors = FALSE
)
return(df_simples)
}
# Criar tabela final simples
criar_tabela_final <- function() {
# Extrair dados dos dois experimentos
dados1 <- extrair_dados_cld(resultados_exp1$cld) %>% rename(MEDIA_1 = MEDIA, GRUPO_1 = GRUPO)
dados2 <- extrair_dados_cld(resultados_exp2$cld) %>% rename(MEDIA_2 = MEDIA, GRUPO_2 = GRUPO)
# Unir as tabelas pelos tratamentos
tabela <- full_join(dados1, dados2, by = "TRATAMENTO")
# Adicionar linha com CV
linha_cv <- data.frame(
TRATAMENTO = "CV (%)",
MEDIA_1 = resultados_exp1$cv,
GRUPO_1 = "",
MEDIA_2 = resultados_exp2$cv,
GRUPO_2 = "",
stringsAsFactors = FALSE
)
tabela_final <- bind_rows(tabela, linha_cv)
return(tabela_final)
}
# Gerar e exibir tabela
tabela_final <- criar_tabela_final()
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
# Função para extrair dados do CLD
extrair_dados_cld <- function(cld_obj) {
df <- as.data.frame(cld_obj)
# Pega o nome da coluna de média
nome_media <- names(df)[which(names(df) %in% c("response", "emmean", "prob"))[1]]
nome_tratamento <- names(df)[which(names(df) %in% c("TRATAMENTO", "treatment", "trt"))[1]]
nome_grupo <- names(df)[which(names(df) %in% c(".group", "group"))[1]]
df_simples <- data.frame(
TRATAMENTO = df[[nome_tratamento]],
MEDIA = round(df[[nome_media]], 2),
GRUPO = df[[nome_grupo]],
stringsAsFactors = FALSE
)
return(df_simples)
}
# Criar tabela final simples
criar_tabela_final <- function() {
# Extrair dados dos dois experimentos
dados1 <- extrair_dados_cld(resultados_exp1$cld) %>% rename(MEDIA_1 = MEDIA, GRUPO_1 = GRUPO)
dados2 <- extrair_dados_cld(resultados_exp2$cld) %>% rename(MEDIA_2 = MEDIA, GRUPO_2 = GRUPO)
# Unir as tabelas pelos tratamentos
tabela <- full_join(dados1, dados2, by = "TRATAMENTO")
# Adicionar linha com CV
linha_cv <- data.frame(
TRATAMENTO = "CV (%)",
MEDIA_1 = resultados_exp1$cv,
GRUPO_1 = "",
MEDIA_2 = resultados_exp2$cv,
GRUPO_2 = "",
stringsAsFactors = FALSE
)
tabela_final <- bind_rows(tabela, linha_cv)
return(tabela_final)
}
# Gerar e exibir tabela
tabela_final <- criar_tabela_final()
if (!exists("resultados_exp1") || !exists("resultados_exp2")) {
stop("Você precisa definir os objetos 'resultados_exp1' e 'resultados_exp2' antes de gerar a tabela.")
}
# Carregar pacotes necessários
library(dplyr)
library(tidyr)
library(emmeans)
library(multcomp)
library(agricolae)
library(knitr)
library(kableExtra)
# Função principal de análise
analisar_experimento <- function(dados_experimento, exp_id) {
message(paste("\nAnálise para o Experimento", exp_id, "\n"))
modelo <- lm(audpc ~ TRATAMENTO + BLOCO, data = dados_experimento)
# Verificação dos pressupostos
teste_normalidade <- shapiro.test(residuals(modelo)) # alternativa simples
p_heteroced <- car::ncvTest(modelo)$p
if (p_heteroced < 0.05) {
message("Heterocedasticidade detectada (p = ", round(p_heteroced, 3), "). Aplicando transformação logarítmica.")
modelo <- lm(log(audpc) ~ TRATAMENTO + BLOCO, data = dados_experimento)
}
anova_result <- anova(modelo)
medias <- emmeans(modelo, ~ TRATAMENTO, type = "response")
cld_result <- cld(medias, Letters = letters, adjust = "tukey")
cv <- agricolae::cv.model(modelo) %>% round(2)
list(modelo = modelo, anova = anova_result, medias = medias, cld = cld_result, cv = cv)
}
# Executar análise para dois subconjuntos dos dados
resultados_exp1 <- analisar_experimento(filter(PTD_3, REPETIÇÃO == 1), 1)
modelo_interacao <- lm(audpc ~ TRATAMENTO * REPETIÇÃO + BLOCO,
data = PTD_3)
library(tidyverse)
library(drc)
library(gsheet)
library(kableExtra)
library(DT)
library(leaflet)
library(patchwork)
library(performance)
library(emmeans)
library(DHARMa)
library(multcomp)
library(epifitter)
library(lme4)
library(agricolae)
library(qqplotr)
leaflet() %>%
addTiles() %>%
setView(lng = -42.8497, lat = -20.7453, zoom = 16) %>%
addMarkers(lng = -42.8497, lat = -20.7453,
popup = "Localização do experimento")
GU <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1zEsVt_nnmydEUBJjkyMrOLHEu6pXeM-SmwTXyEoNbmg/edit?gid=0#gid=0")
GU <- GU %>%
mutate(
REPETICAO = as.factor(REPETICAO),
DOSE = as.numeric(DOSE)
)
head(GU) %>%
kable(align = "c") %>%
kable_styling(full_width = FALSE)
controle <- GU %>%
filter(DOSE == 0) %>%
summarise(mean_controle = mean(TAXA_DE_GERMINAÇÃO)) %>%
pull()
GU2 <- GU %>%
group_by(DOSE) %>%
summarise(
mean_germ = mean(TAXA_DE_GERMINAÇÃO),
sd_germ = sd(TAXA_DE_GERMINAÇÃO),
n = n()
) %>%
mutate(
inib = ((controle - mean_germ)/controle)*100,
CI_lower = mean_germ - qt(0.975, df = n-1) * sd_germ/sqrt(n),
CI_upper = mean_germ + qt(0.975, df = n-1) * sd_germ/sqrt(n)
) %>%
round(digits = 2)
head(GU2) %>%
kable(align = "c") %>%
kable_styling(full_width = FALSE)
EC <- drm(
mean_germ ~ DOSE,
data = GU2,
fct = W1.4()
)
summary(EC)
par(mfrow = c(1, 2))
plot(residuals(EC) ~ fitted(EC), main = "Resíduos vs Ajustados")
abline(h = 0, col = "red")
qqnorm(residuals(EC), main = "Q-Q Plot dos Resíduos")
qqline(residuals(EC), col = "red")
EC50_result <- ED(EC, 50, interval = "delta")
cat(paste("EC50 =", round(EC50_result[1], 2),
"(", round(EC50_result[3], 2), "-", round(EC50_result[4], 2), ")"))
plot_curva <- ggplot(data = GU2, aes(x = DOSE)) +
geom_point(aes(y = mean_germ), size = 3) +
geom_errorbar(aes(ymin = CI_lower, ymax = CI_upper), width = 0.2) +
geom_line(aes(y = fitted(EC)), color = "blue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +
annotate("text",
x = max(GU2$DOSE),
y = 55,
label = paste0("EC50 = ", round(EC50_result[1], 2),
" (", round(EC50_result[3], 2), "-",
round(EC50_result[4], 2), ")"),
hjust = 1,
color = "red") +
labs(x = expression("Dose (ml L"^-1~")"),
y = "Germinação média (%)",
title = "Curva Dose-Resposta") +
theme_minimal()
print(plot_curva)
extrair_dados_cld <- function(cld_obj) {
df <- as.data.frame(cld_obj)
tratamento <- if ("TRATAMENTO" %in% names(df)) {
as.character(df$TRATAMENTO)
} else if ("treatment" %in% names(df)) {
as.character(df$treatment)
} else if ("trt" %in% names(df)) {
as.character(df$trt)
} else {
as.character(rownames(df))
}
response <- if ("response" %in% names(df)) {
df$response
} else if ("emmean" %in% names(df)) {
df$emmean
} else if ("prob" %in% names(df)) {
df$prob
} else {
rep(NA, nrow(df))
}
group <- if (".group" %in% names(df)) {
df$.group
} else if ("group" %in% names(df)) {
df$group
} else {
rep("", nrow(df))
}
data.frame(
TRATAMENTO = tratamento,
response = as.numeric(response),
.group = as.character(group),
stringsAsFactors = FALSE
)
}
criar_tabela_final <- function() {
dados_exp1 <- extrair_dados_cld(resultados_exp1$cld) %>%
mutate(Experimento = "1",
response = round(response, 2))
dados_exp2 <- extrair_dados_cld(resultados_exp2$cld) %>%
mutate(Experimento = "2",
response = round(response, 2))
tabela <- bind_rows(dados_exp1, dados_exp2) %>%
pivot_wider(
names_from = Experimento,
values_from = c(response, .group),
names_glue = "Exp_{Experimento}_{.value}"
)
linha_cv <- data.frame(
TRATAMENTO = "CV (%)",
Exp_1_response = resultados_exp1$cv,
Exp_2_response = resultados_exp2$cv,
Exp_1_.group = "",
Exp_2_.group = "",
stringsAsFactors = FALSE
)
names(linha_cv) <- names(tabela)
tabela_final <- bind_rows(tabela, linha_cv)
colnames(tabela_final) <- c("Tratamento",
"AACPD Exp 1", "Grupo Exp 1",
"AACPD Exp 2", "Grupo Exp 2")
return(tabela_final)
}
tabela_final <- criar_tabela_final()
library(tidyverse)
library(drc)
library(gsheet)
library(kableExtra)
library(DT)
library(leaflet)
library(patchwork)
library(performance)
library(emmeans)
library(DHARMa)
library(multcomp)
library(epifitter)
library(lme4)
library(agricolae)
library(qqplotr)
leaflet() %>%
addTiles() %>%
setView(lng = -42.8497, lat = -20.7453, zoom = 16) %>%
addMarkers(lng = -42.8497, lat = -20.7453,
popup = "Localização do experimento")
GU <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1zEsVt_nnmydEUBJjkyMrOLHEu6pXeM-SmwTXyEoNbmg/edit?gid=0#gid=0")
GU <- GU %>%
mutate(
REPETICAO = as.factor(REPETICAO),
DOSE = as.numeric(DOSE)
)
head(GU) %>%
kable(align = "c") %>%
kable_styling(full_width = FALSE)
controle <- GU %>%
filter(DOSE == 0) %>%
summarise(mean_controle = mean(TAXA_DE_GERMINAÇÃO)) %>%
pull()
GU2 <- GU %>%
group_by(DOSE) %>%
summarise(
mean_germ = mean(TAXA_DE_GERMINAÇÃO),
sd_germ = sd(TAXA_DE_GERMINAÇÃO),
n = n()
) %>%
mutate(
inib = ((controle - mean_germ)/controle)*100,
CI_lower = mean_germ - qt(0.975, df = n-1) * sd_germ/sqrt(n),
CI_upper = mean_germ + qt(0.975, df = n-1) * sd_germ/sqrt(n)
) %>%
round(digits = 2)
head(GU2) %>%
kable(align = "c") %>%
kable_styling(full_width = FALSE)
EC <- drm(
mean_germ ~ DOSE,
data = GU2,
fct = W1.4()
)
summary(EC)
par(mfrow = c(1, 2))
plot(residuals(EC) ~ fitted(EC), main = "Resíduos vs Ajustados")
abline(h = 0, col = "red")
qqnorm(residuals(EC), main = "Q-Q Plot dos Resíduos")
qqline(residuals(EC), col = "red")
EC50_result <- ED(EC, 50, interval = "delta")
cat(paste("EC50 =", round(EC50_result[1], 2),
"(", round(EC50_result[3], 2), "-", round(EC50_result[4], 2), ")"))
plot_curva <- ggplot(data = GU2, aes(x = DOSE)) +
geom_point(aes(y = mean_germ), size = 3) +
geom_errorbar(aes(ymin = CI_lower, ymax = CI_upper), width = 0.2) +
geom_line(aes(y = fitted(EC)), color = "blue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +
annotate("text",
x = max(GU2$DOSE),
y = 55,
label = paste0("EC50 = ", round(EC50_result[1], 2),
" (", round(EC50_result[3], 2), "-",
round(EC50_result[4], 2), ")"),
hjust = 1,
color = "red") +
labs(x = expression("Dose (ml L"^-1~")"),
y = "Germinação média (%)",
title = "Curva Dose-Resposta") +
theme_minimal()
print(plot_curva)
extrair_dados_cld <- function(cld_obj) {
df <- as.data.frame(cld_obj)
tratamento <- if ("TRATAMENTO" %in% names(df)) {
as.character(df$TRATAMENTO)
} else if ("treatment" %in% names(df)) {
as.character(df$treatment)
} else if ("trt" %in% names(df)) {
as.character(df$trt)
} else {
as.character(rownames(df))
}
response <- if ("response" %in% names(df)) {
df$response
} else if ("emmean" %in% names(df)) {
df$emmean
} else if ("prob" %in% names(df)) {
df$prob
} else {
rep(NA, nrow(df))
}
group <- if (".group" %in% names(df)) {
df$.group
} else if ("group" %in% names(df)) {
df$group
} else {
rep("", nrow(df))
}
data.frame(
TRATAMENTO = tratamento,
response = as.numeric(response),
.group = as.character(group),
stringsAsFactors = FALSE
)
}
criar_tabela_final <- function() {
dados_exp1 <- extrair_dados_cld(resultados_exp1$cld) %>%
mutate(Experimento = "1",
response = round(response, 2))
dados_exp2 <- extrair_dados_cld(resultados_exp2$cld) %>%
mutate(Experimento = "2",
response = round(response, 2))
tabela <- bind_rows(dados_exp1, dados_exp2) %>%
pivot_wider(
names_from = Experimento,
values_from = c(response, .group),
names_glue = "Exp_{Experimento}_{.value}"
)
linha_cv <- data.frame(
TRATAMENTO = "CV (%)",
Exp_1_response = resultados_exp1$cv,
Exp_2_response = resultados_exp2$cv,
Exp_1_.group = "",
Exp_2_.group = "",
stringsAsFactors = FALSE
)
names(linha_cv) <- names(tabela)
tabela_final <- bind_rows(tabela, linha_cv)
colnames(tabela_final) <- c("Tratamento",
"AACPD Exp 1", "Grupo Exp 1",
"AACPD Exp 2", "Grupo Exp 2")
return(tabela_final)
}
tabela_final <- criar_tabela_final()
# Carregando pacotes necessários
library(tidyverse)
# Carregando pacotes necessários
library(tidyverse)
library(drc)
library(gsheet)
library(kableExtra)
library(DT)
library(leaflet)
library(patchwork)
library(performance)
library(emmeans)
library(DHARMa)
library(multcomp)
library(epifitter)
library(lme4)
library(agricolae)
library(qqplotr)
library(car)
library(knitr)
# Importando dados do Google Sheets
url <- 'https://docs.google.com/spreadsheets/d/1TbOJZCFEhH0o22kDOa-3yAwf3prZNGGn/edit?usp=sharing&ouid=104698203121406282663&rtpof=true&sd=true'
PTD <- gsheet2tbl(url)
# Importando dados do Google Sheets
url <- 'https://docs.google.com/spreadsheets/d/1TbOJZCFEhH0o22kDOa-3yAwf3prZNGGn/edit?usp=sharing&ouid=104698203121406282663&rtpof=true&sd=true'
PTD <- gsheet2tbl(url)
# Visualizando os dados
glimpse(PTD)
summary(PTD)
# Localização do experimento
leaflet() %>%
addTiles() %>%
setView(lng = -42.8497, lat = -20.7453, zoom = 16) %>%
addMarkers(lng = -42.8497, lat = -20.7453, popup = "Localização do experimento")
# Regressão logística para tratamento 1 como exemplo
TRAT1 <- PTD %>% filter(TRATAMENTO == 1)
# Função para extrair CLD
extrair_dados_cld <- function(modelo, variavel_resposta) {
cld_data <- cld(emmeans(modelo, ~ TRATAMENTO), Letters = letters) %>%
as.data.frame() %>%
rename(media = !!sym(variavel_resposta), letra = .group)
return(cld_data)
}
# Tabela com letras de comparação
tabela_letras <- extrair_dados_cld(modelo_AACPD, "aacpd")
